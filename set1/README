Answers:

Question 1
1.1 This doesn't work because you can't just create a pointer and set the value at its address, because there's no memory allocated for it yet so it doesn't have an address. To fix this, one should break the line
int *a = 3;
into two lines, one allocating the memory and one assigning the value at that address:
int *a = (int*) malloc(sizeof(int));
*a = 3;

1.2 This doesn't work because int* a, b doesn't create two int pointers, it creates an int pointer a and an int b, since the * symbol in C doesn't "distribute" across multi-variable declarations like this one. To fix this, one should replace the line
int* a, b;
with the line
int *a, *b;
since this creates two int pointers.

1.3 This is wrong because malloc takes the number of bytes to allocate as an argument, but 1000 integers don't take up 1000 bytes, they take up 1000 * sizeof(int) bytes (4000 on my system). Thus, once the index i gets past a certain point in the for loop, the address a + i will be out of the memory allocated for a, and this function will start writing to memory somewhere in the computer that it's not supposed to be writing to. To fix this, the line
int i, *a = (int*) malloc(1000);
should be replaced with
int i, *a = (int*) malloc(1000 * sizeof(int));
since this allocates the correct amount of memory.

1.4 This doesn't work for the same reason 1.1 didn't, which is that each int* representing a row of the two-dimensional array is just a null pointer since no memory has actually been allocated for it. To fix this, you need to loop through each row and malloc enough memory for 100 integers, i.e. add
int i;
for (i = 0; i < 3; i++)
    a[i] = (int*) malloc(100 * sizeof(int));
after the first line.

1.5 This is incorrect because it doesn't check if the user-inputted value is 0, as it only checks if the pointer a is null, not if the value *at* a is 0. To fix this, the line
if (!a)
should be replaced with
if (!*a)
since this dereferences a and then checks if the resulting value is 0.

Question 2
2.1 The first calculation will have an easier and faster implementation on the GPU, because it's completely parallelizable: each y[n] only depends on the input data, whereas the second equation relies on previous calculations of y. Thus, each sample point along the output signal will have to wait for other computations to finish or make a bunch of recursive calls to compute the same values other threads are already computing, while the first one could in theory be computed all at once since the threads have no issue reading from any location in the input data.

2.2 If c is close to 1, then we can use the recurrence relation for y[n] to get an estimate. Written out fully, the relation is
y[n] = c (x[n] + (1 - c) x[n - 1] + (1 - c)^2 x[n - 2] + ... + (1 - c)^(n - 1) x[1]) + (1 - c)^n x[0].
However, when c is close to 1, any term with at least two factors of (1 - c) is basically negligible, since (1 - c)^k, where k >= 2, is effectively 0. Thus, an approximation for y[n] under this condition is
y[n] = c (x[n] + (1 - c) x[n - 1]).
